import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import mongoose, { HydratedDocument, Types } from 'mongoose';
import { User } from 'src/users/schemas/user.schema';
import { Product } from 'src/products/schemas/product.schema';
import { Location } from 'src/locations/schemas/location.schema';

export type OrderDocument = HydratedDocument<Order>;

/**
 * üß© S·∫£n ph·∫©m trong ƒë∆°n h√†ng
 * (gi·ªëng CartItem nh∆∞ng gi√°, topping, size ƒë∆∞·ª£c c·ªë ƒë·ªãnh l√∫c ƒë·∫∑t)
 */
@Schema({ _id: true })
export class OrderItem {
    @Prop({ type: mongoose.Schema.Types.ObjectId, ref: Product.name, required: true })
    product: mongoose.Types.ObjectId;

    @Prop({ required: true })
    productName: string;

    @Prop({ required: true })
    basePrice: number;

    @Prop({ type: mongoose.Schema.Types.ObjectId })
    sizeId?: mongoose.Schema.Types.ObjectId;

    @Prop()
    sizeName?: string;

    @Prop({ type: [mongoose.Schema.Types.ObjectId], default: [] })
    toppingIds?: mongoose.Schema.Types.ObjectId[];

    @Prop({ type: [String], default: [] })
    toppingNames?: string[];

    @Prop({ required: true })
    quantity: number;

    @Prop({ required: true })
    totalPrice: number;

    @Prop()
    note?: string;

    @Prop()
    image?: string;
}
export const OrderItemSchema = SchemaFactory.createForClass(OrderItem);

/**
 * üßæ ƒê∆°n h√†ng (ch·ªâ ch·ª©a 1 shop duy nh·∫•t)
 */
@Schema({ timestamps: true })
export class Order {
    // Ng∆∞·ªùi mua
    @Prop({ type: mongoose.Schema.Types.ObjectId, ref: User.name, required: true })
    customer: mongoose.Types.ObjectId;

    // Shop ƒë∆∞·ª£c mua
    @Prop({ type: mongoose.Schema.Types.ObjectId, ref: User.name, required: true })
    shop: mongoose.Types.ObjectId;

    // Danh s√°ch s·∫£n ph·∫©m mua
    @Prop({ type: [OrderItemSchema], default: [] })
    items: OrderItem[];

    // T·ªïng ti·ªÅn ƒë∆°n h√†ng
    @Prop({ required: true, default: 0 })
    totalPrice: number;

    // Tr·∫°ng th√°i ƒë∆°n h√†ng
    @Prop({
        required: true,
        default: 'pending',
        enum: ['pending', 'confirmed', 'preparing', 'delivering', 'completed', 'cancelled'],
    })
    orderStatus: string;

    @Prop({ type: Types.ObjectId, ref: Location.name })
    deliveryAddress?: Location;

    @Prop({ default: '' })
    receiverName: string;

    @Prop({ default: '' })
    receiverPhone: string;

    // Ng√†y ƒë·∫∑t & giao
    @Prop({ default: Date.now })
    orderDate: Date;

    @Prop()
    deliveredAt?: Date;

    // Kho·∫£ng c√°ch (km)
    @Prop({ default: 0 })
    distance: number;
    // Ph√≠ ship
    @Prop({ default: 0 })
    shippingCost: number;
    // Ghi ch√∫ ƒë∆°n h√†ng
    @Prop({ default: '' })
    note: string;

    // Soft delete flag
    @Prop({ default: false })
    isDeleted: boolean;
}
export const OrderSchema = SchemaFactory.createForClass(Order);
